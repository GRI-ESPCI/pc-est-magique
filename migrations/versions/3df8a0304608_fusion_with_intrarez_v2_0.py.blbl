"""Fusion with IntraRez (v2.0)

Revision ID: 3df8a0304608
Revises: 3a1b45e7c5bc
Create Date: 2022-07-03 02:39:43.020939

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = "3df8a0304608"
down_revision = "3a1b45e7c5bc"
branch_labels = None
depends_on = None


old_options = ("photos", "pceen", "collection", "album", "role")
new_options = sorted(old_options + ("intrarez",))

old_type = sa.Enum(*old_options, name="permission_scope")
new_type = sa.Enum(*new_options, name="permission_scope")
tmp_type = sa.Enum(*new_options, name="_permission_scope")


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "offer",
        sa.Column("slug", sa.String(length=32), nullable=False),
        sa.Column("name_fr", sa.String(length=64), nullable=False),
        sa.Column("name_en", sa.String(length=64), nullable=False),
        sa.Column("description_fr", sa.String(length=2000), nullable=True),
        sa.Column("description_en", sa.String(length=2000), nullable=True),
        sa.Column(
            "price", sa.Numeric(precision=6, scale=2, asdecimal=False), nullable=True
        ),
        sa.Column("months", sa.Integer(), nullable=False),
        sa.Column("days", sa.Integer(), nullable=False),
        sa.Column("visible", sa.Boolean(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("slug"),
    )
    op.create_table(
        "room",
        sa.Column("num", sa.Integer(), nullable=False),
        sa.Column("floor", sa.Integer(), nullable=False),
        sa.Column("base_ip", sa.String(length=4), nullable=False),
        sa.Column("ips_allocated", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("num"),
    )
    op.create_table(
        "ban",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("_pceen_id", sa.Integer(), nullable=False),
        sa.Column("start", sa.DateTime(), nullable=False),
        sa.Column("end", sa.DateTime(), nullable=True),
        sa.Column("reason", sa.String(length=32), nullable=False),
        sa.Column("message", sa.String(length=2000), nullable=True),
        sa.ForeignKeyConstraint(
            ["_pceen_id"],
            ["pceen.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "device",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("_pceen_id", sa.Integer(), nullable=False),
        sa.Column("mac_address", sa.String(length=17), nullable=False),
        sa.Column("name", sa.String(length=64), nullable=True),
        sa.Column("type", sa.String(length=64), nullable=True),
        sa.Column("registered", sa.DateTime(), nullable=False),
        sa.Column("last_seen", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["_pceen_id"],
            ["pceen.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("mac_address"),
    )
    op.create_table(
        "payment",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("_pceen_id", sa.Integer(), nullable=False),
        sa.Column(
            "amount", sa.Numeric(precision=6, scale=2, asdecimal=False), nullable=False
        ),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("payed", sa.DateTime(), nullable=True),
        sa.Column(
            "scope",
            sa.Enum(
                "manual",
                "creating",
                "waiting",
                "accepted",
                "refused",
                "cancelled",
                "error",
                name="paymentstatus",
            ),
            nullable=False,
        ),
        sa.Column("lydia_uuid", sa.String(length=32), nullable=True),
        sa.Column("lydia_transaction_id", sa.String(length=32), nullable=True),
        sa.Column("_gri_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["_gri_id"],
            ["pceen.id"],
        ),
        sa.ForeignKeyConstraint(
            ["_pceen_id"],
            ["pceen.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "rental",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("_pceen_id", sa.Integer(), nullable=False),
        sa.Column("_room_num", sa.Integer(), nullable=False),
        sa.Column("start", sa.Date(), nullable=False),
        sa.Column("end", sa.Date(), nullable=True),
        sa.ForeignKeyConstraint(
            ["_pceen_id"],
            ["pceen.id"],
        ),
        sa.ForeignKeyConstraint(
            ["_room_num"],
            ["room.num"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "allocation",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("_device_id", sa.Integer(), nullable=False),
        sa.Column("_room_num", sa.Integer(), nullable=False),
        sa.Column("ip", sa.String(length=16), nullable=False),
        sa.ForeignKeyConstraint(
            ["_device_id"],
            ["device.id"],
        ),
        sa.ForeignKeyConstraint(
            ["_room_num"],
            ["room.num"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "subscription",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("_pceen_id", sa.Integer(), nullable=False),
        sa.Column("_offer_slug", sa.String(length=32), nullable=False),
        sa.Column("_payment_id", sa.Integer(), nullable=True),
        sa.Column("start", sa.Date(), nullable=False),
        sa.Column("end", sa.Date(), nullable=False),
        sa.ForeignKeyConstraint(
            ["_offer_slug"],
            ["offer.slug"],
        ),
        sa.ForeignKeyConstraint(
            ["_payment_id"],
            ["payment.id"],
        ),
        sa.ForeignKeyConstraint(
            ["_pceen_id"],
            ["pceen.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    sub_state_enum =     banner_status.create(op.get_bind())
    banner_status.create(op.get_bind())
    op.add_column("pceen", sa.Column("sub_state", sub_state_enum, nullable=True))
    # ### end Alembic commands ###
    # Create a temporary "_permission_scope" type, convert and drop the "old" type
    tmp_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE permission ALTER COLUMN scope TYPE _permission_scope USING scope::text::_permission_scope"
    )
    old_type.drop(op.get_bind(), checkfirst=False)
    # Create and convert to the "new" scope type
    new_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE permission ALTER COLUMN scope TYPE permission_scope USING scope::text::scope"
    )
    tmp_type.drop(op.get_bind(), checkfirst=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("pceen", "sub_state")
    op.drop_table("subscription")
    op.drop_table("allocation")
    op.drop_table("rental")
    op.drop_table("payment")
    op.drop_table("device")
    op.drop_table("ban")
    op.drop_table("room")
    op.drop_table("offer")
    # ### end Alembic commands ###
    # Convert 'output_limit_exceeded' scope into 'timed_out'
    op.execute("DELETE FROM permission WHERE scope='intrarez'")
    # Create a temporary "_permission_scope" type, convert and drop the "new" type
    tmp_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE permission ALTER COLUMN scope TYPE _permission_scope USING scope::text::_permission_scope"
    )
    new_type.drop(op.get_bind(), checkfirst=False)
    # Create and convert to the "old" scope type
    old_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE permission ALTER COLUMN scope TYPE permission_scope USING scope::text::scope"
    )
    tmp_type.drop(op.get_bind(), checkfirst=False)
